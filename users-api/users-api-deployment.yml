apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-api
  namespace: microservices
spec:
  replicas: 2
  selector:
    matchLabels:
      app: users-api
  template:
    metadata:
      labels:
        app: users-api
    spec:
      containers:
        - name: users-api
          # Asegúrate que el pipeline de CI/CD reemplace ':latest' con el tag correcto (ej: github.sha)
          image: acrformymicroservices-test.azurecr.io/users-api:latest
          imagePullPolicy: Always # Puede ser útil para desarrollo, pero considera 'IfNotPresent' o eliminarla en producción
          ports:
            - containerPort: 8083 # El puerto donde la aplicación Spring Boot escucha
          env:
            # **NOTA DE SEGURIDAD:** No hardcodees secretos aquí. Usa valueFrom.secretKeyRef
            - name: JWT_SECRET
              value: "PRFT" # <-- Considera cambiar esto para obtenerlo de un Secret de Kubernetes
            - name: SERVER_PORT
              value: "8083"
          # --- Probes ajustadas para usar exec ---
          livenessProbe: # Chequeo de vida: ¿Está la aplicación 'viva'?
            exec:
              # Define el comando que se ejecutará dentro del contenedor
              # Asegúrate de que 'check_health.sh' exista y sea ejecutable dentro de la imagen
              command:
                - /bin/sh # O /bin/bash, dependiendo de lo que esté disponible en tu imagen
                - -c
                - /app/scripts/check_health.sh # Ruta al script de salud dentro del contenedor
            initialDelaySeconds: 15 # Tiempo inicial de espera antes del primer chequeo (ajusta si es necesario)
            periodSeconds: 10       # Frecuencia de los chequeos
            timeoutSeconds: 5       # Tiempo máximo para que el comando termine
            failureThreshold: 3     # Número de fallos consecutivos antes de considerar el pod no saludable
          readinessProbe: # Chequeo de preparación: ¿Está la aplicación lista para recibir tráfico?
            exec:
              # Define el comando que se ejecutará dentro del contenedor
              command:
                - /bin/sh
                - -c
                - /app/scripts/check_health.sh # Puede ser el mismo script o uno diferente
            initialDelaySeconds: 5 # Tiempo inicial de espera (suele ser un poco más que liveness)
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          # --- Fin de las probes ajustadas ---
          # ... otras configuraciones del contenedor si las hay
--- # Separador de documentos YAML
apiVersion: v1
kind: Service
metadata:
  name: users-api
  namespace: microservices
spec:
  selector:
    app: users-api
  ports:
    - protocol: TCP
      port: 8083 # Puerto del servicio
      targetPort: 8083 # Puerto del contenedor al que el servicio redirige el tráfico
  type: ClusterIP # O LoadBalancer si necesitas acceso externo directo
